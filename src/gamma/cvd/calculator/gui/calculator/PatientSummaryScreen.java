/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamma.cvd.calculator.gui.calculator;

import gamma.cvd.calculator.CVDRiskData;
import java.util.ArrayList;

/**
 *
 * @author Jack
 */
public class PatientSummaryScreen extends javax.swing.JFrame
{

    PatientSummaryScreen(CVDRiskData model)
    {
        initComponents();
        DisplayHealthTips(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelRiskSummary = new javax.swing.JPanel();
        panelTips = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTips = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NHS CVD Calculator - Patient Summary");

        panelRiskSummary.setBorder(javax.swing.BorderFactory.createTitledBorder("Risk"));

        javax.swing.GroupLayout panelRiskSummaryLayout = new javax.swing.GroupLayout(panelRiskSummary);
        panelRiskSummary.setLayout(panelRiskSummaryLayout);
        panelRiskSummaryLayout.setHorizontalGroup(
            panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 353, Short.MAX_VALUE)
        );
        panelRiskSummaryLayout.setVerticalGroup(
            panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 406, Short.MAX_VALUE)
        );

        panelTips.setBorder(javax.swing.BorderFactory.createTitledBorder("Tips"));

        txtTips.setEditable(false);
        txtTips.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(txtTips);

        javax.swing.GroupLayout panelTipsLayout = new javax.swing.GroupLayout(panelTips);
        panelTips.setLayout(panelTipsLayout);
        panelTipsLayout.setHorizontalGroup(
            panelTipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
        );
        panelTipsLayout.setVerticalGroup(
            panelTipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelRiskSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelRiskSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panelTips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelRiskSummary;
    private javax.swing.JPanel panelTips;
    private javax.swing.JEditorPane txtTips;
    // End of variables declaration//GEN-END:variables

    private void DisplayHealthTips(CVDRiskData model)
    {
        final double LDL_UPPER_BOUND = 3.37;
        final double CHOLESTEROL_UPPER_BOUND = 3.37;
        final double HDL_LOWER_BOUND = 1.30;
        final double DIASTOLIC_BP_UPPER_BOUND = 84;
        final String NEW_LINE = "<br>";
        final String HTML_FONT  = "<font face=\"calibri\">";

        StringBuilder healthTips = new StringBuilder();
        // Enable HTML formatting
        healthTips.append("<html>");
        healthTips.append(HTML_FONT);

        if (model.getCholesterolType().equals(CVDRiskData.LDL) && model.getCholesterolMmolL() > LDL_UPPER_BOUND)
        {
            healthTips.append("<b><u>Cholesterol tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        } 
        else if (model.getCholesterolMmolL() > CHOLESTEROL_UPPER_BOUND)
        {
            healthTips.append("<b><u>Cholesterol tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));            
        }

        if (model.getHdlMmolL() < HDL_LOWER_BOUND)
        {
            healthTips.append("<b><u>HDL tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));            
        }

        if (model.getBloodPressureDiastolicMmHg() > DIASTOLIC_BP_UPPER_BOUND)
        {
            healthTips.append("<b><u>Blood Pressure Tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));           
        }

        if (model.isIsDiabetic())
        {
            healthTips.append("<b><u>Tips to manage diabetes</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        if (model.isIsSmoker())
        {
            healthTips.append("<b><u>Tips to quit smoking</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        healthTips.append("</font>");
        
        txtTips.setText(healthTips.toString());

    }

    private String LoadHealthTips(ArrayList<String> tips)
    {
        StringBuilder healthTips = new StringBuilder(); 
        final String NEW_LINE = "<br>";

        for (String line: tips)
        {
            if (line != null && !line.isEmpty())
            {
                healthTips.append(" - ");
                healthTips.append(line);
                healthTips.append(NEW_LINE);
            }
        }
        
        return healthTips.toString();
    }
}
