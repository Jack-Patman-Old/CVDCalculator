/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gamma.cvd.calculator.gui.calculator;

import gamma.cvd.calculator.CVDRiskData;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author Jack
 */
public class PatientSummaryScreen extends javax.swing.JFrame
{
    PatientSummaryScreen(CVDRiskData model)
    {
        initComponents();
        DisplayHealthTips(model);
        DisplaySummary(model);
        
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        panelRiskSummary = new javax.swing.JPanel();
        lblRiskSummary = new javax.swing.JLabel();
        lblTenYearLikelihood = new javax.swing.JLabel();
        lblAvgRisk = new javax.swing.JLabel();
        imgRiskSummary = new javax.swing.JLabel();
        lblYouAre = new javax.swing.JLabel();
        panelTips = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTips = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NHS CVD Calculator - Patient Summary");

        panelRiskSummary.setBorder(javax.swing.BorderFactory.createTitledBorder("Risk"));

        lblRiskSummary.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblRiskSummary.setText("Risk Placeholder");

        lblTenYearLikelihood.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblTenYearLikelihood.setText("<html>Likely to develop a heart disease<br>\nwithin the next  <u>10 Years</u>");

        lblAvgRisk.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAvgRisk.setText("<html>The average % risk for your<br> age group is: <u>0%</u>");

        imgRiskSummary.setIcon(new javax.swing.ImageIcon("C:\\Users\\Jack\\Documents\\GitHub\\CVDCalculator\\resources\\icons\\calculatorStaticHearts\\heart1pct.png")); // NOI18N

        lblYouAre.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblYouAre.setText("You Are...");

        javax.swing.GroupLayout panelRiskSummaryLayout = new javax.swing.GroupLayout(panelRiskSummary);
        panelRiskSummary.setLayout(panelRiskSummaryLayout);
        panelRiskSummaryLayout.setHorizontalGroup(
            panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                .addGroup(panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTenYearLikelihood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAvgRisk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(imgRiskSummary))
                    .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(lblYouAre))
                    .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(lblRiskSummary)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        panelRiskSummaryLayout.setVerticalGroup(
            panelRiskSummaryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelRiskSummaryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRiskSummary)
                .addGap(11, 11, 11)
                .addComponent(lblYouAre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(imgRiskSummary)
                .addGap(18, 18, 18)
                .addComponent(lblTenYearLikelihood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(lblAvgRisk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelTips.setBorder(javax.swing.BorderFactory.createTitledBorder("Tips to improve your score"));

        txtTips.setEditable(false);
        txtTips.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(txtTips);

        javax.swing.GroupLayout panelTipsLayout = new javax.swing.GroupLayout(panelTips);
        panelTips.setLayout(panelTipsLayout);
        panelTipsLayout.setHorizontalGroup(
            panelTipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE))
        );
        panelTipsLayout.setVerticalGroup(
            panelTipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelRiskSummary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelTips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelRiskSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel imgRiskSummary;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvgRisk;
    private javax.swing.JLabel lblRiskSummary;
    private javax.swing.JLabel lblTenYearLikelihood;
    private javax.swing.JLabel lblYouAre;
    private javax.swing.JPanel panelRiskSummary;
    private javax.swing.JPanel panelTips;
    private javax.swing.JEditorPane txtTips;
    // End of variables declaration//GEN-END:variables

    private void DisplayHealthTips(CVDRiskData model)
    {
        final double LDL_UPPER_BOUND = 3.37;
        final double CHOLESTEROL_UPPER_BOUND = 3.37;
        final double HDL_LOWER_BOUND = 1.30;
        final double DIASTOLIC_BP_UPPER_BOUND = 84;
        final String NEW_LINE = "<br>";
        final String HTML_FONT = "<font face=\"calibri\">";

        StringBuilder healthTips = new StringBuilder();
        // Enable HTML formatting
        healthTips.append("<html>");
        healthTips.append(HTML_FONT);

        if (model.getCholesterolType().equals(CVDRiskData.LDL) && model.getCholesterolMmolL() > LDL_UPPER_BOUND)
        {
            healthTips.append("<b><u>Cholesterol tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        } else if (model.getCholesterolMmolL() > CHOLESTEROL_UPPER_BOUND)
        {
            healthTips.append("<b><u>Cholesterol tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        if (model.getHdlMmolL() < HDL_LOWER_BOUND)
        {
            healthTips.append("<b><u>HDL tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        if (model.getBloodPressureDiastolicMmHg() > DIASTOLIC_BP_UPPER_BOUND)
        {
            healthTips.append("<b><u>Blood Pressure Tips</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        if (model.isIsDiabetic())
        {
            healthTips.append("<b><u>Tips to manage diabetes</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        if (model.isIsSmoker())
        {
            healthTips.append("<b><u>Tips to quit smoking</u></b>");
            healthTips.append(NEW_LINE);
            healthTips.append(LoadHealthTips(new ArrayList<>()));
        }

        healthTips.append("</font>");

        txtTips.setText(healthTips.toString());

    }

    private String LoadHealthTips(ArrayList<String> tips)
    {
        StringBuilder healthTips = new StringBuilder();
        final String NEW_LINE = "<br>";

        for (String line : tips)
        {
            if (line != null && !line.isEmpty())
            {
                healthTips.append(" - ");
                healthTips.append(line);
                healthTips.append(NEW_LINE);
            }
        }

        return healthTips.toString();
    }

    private void DisplaySummary(CVDRiskData model)
    {   
        Integer averageRisk = getAverageRisk(model.getAge());
        lblAvgRisk.setText(lblAvgRisk.getText().replace("0%", Integer.toString(averageRisk) + "%"));
        
        Integer patientRisk = model.getRiskPercentage(model.calculateRiskScore());
        
        if (patientRisk > averageRisk+1)
        {
            lblRiskSummary.setForeground(Color.RED);
            lblRiskSummary.setText("Above average risk");
        }            
        
        if (patientRisk < averageRisk+1 && patientRisk > averageRisk-1)
        {
           lblRiskSummary.setForeground(Color.YELLOW);
           lblRiskSummary.setText("Average risk");
        }
        
        if (patientRisk < averageRisk-1)
        {
            lblRiskSummary.setForeground(Color.GREEN);
            lblRiskSummary.setText("Below average risk");
        }
        
        imgRiskSummary.setIcon(loadCorrectIcon(patientRisk));
    }
    
    private int getAverageRisk(int age)
    {        
        if (age >= 30 && age <= 34)
        {
            return 3;
        }
        
        if (age >= 35 && age <= 39)
        {
            return 5; 
        }
        
        if (age >= 40 && age <= 44)
        {
            return 7; 
        }
        
        if (age >= 45 && age <= 49)
        {
            return 11; 
        }
        
        if (age >= 50 && age <= 54)
        {
            return 14; 
        }
        
        if (age >= 55 && age <= 59)
        {
            return 16; 
        }
  
        if (age >= 60 && age <= 64)
        {
            return 21; 
        }
        
        if (age >= 65 && age <= 69)
        {
            return 25; 
        }
        
        if (age >= 70)
        {
            return 30; 
        }
        
        return 0;
    }

    private Icon loadCorrectIcon(Integer risk)
    {
        final String WORK_DIR = System.getProperty("user.dir");
        final String ICON_DIR = "/resources/icons/calculatorStaticHearts/"; 
        if (risk == 2)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart2pct.png"); 
        }
        else if (risk == 3)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart3pct.png");            
        }
        else if (risk == 4)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart4pct.png");            
        }
        else if (risk == 5 ||  risk == 6)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart6pct.png");             
        }
        else if (risk == 7 || risk == 8)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart7pct.png");            
        }
        else if (risk == 9 || risk == 10)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart9pct.png");             
        }
        else if (risk >= 11 && risk < 14)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart11pct.png");           
        }
        else if (risk >= 14 && risk <= 17)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart14pct.png");             
        }
        else if (risk >= 18 && risk <= 21 )
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart18pct.png");            
        }
        else if (risk >= 22 && risk <= 26)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart22pct.png");            
        }
        else if (risk >= 27 && risk <= 32)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart27pct.png");            
        }
        else if (risk >= 33 && risk <= 39)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart33pct.png");             
        }
        else if (risk >= 40 && risk <= 46)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart40pct.png");             
        }
        else if (risk >= 46 && risk <= 55)
        {
            return new ImageIcon(WORK_DIR+ICON_DIR+"heart47pct.png");             
        }
        else if (risk >= 56)
        {
             return new ImageIcon(WORK_DIR+ICON_DIR+"heart56pct.png");            
        }
           
        return new ImageIcon(WORK_DIR+ICON_DIR+"heart1pct.png"); 
    }
    
}
